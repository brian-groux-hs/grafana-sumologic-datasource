{"version":3,"sources":["../src/querier.js"],"names":["_","Observable","SumologicQuerier","params","format","timeoutSec","useObservable","datasource","backendSrv","retryCount","offset","maximumOffset","startTime","Date","delay","transition","Math","random","defer","state","loop","loopForObservable","calculateRetryWait","job","now","doRequest","data","id","then","result","Promise","reject","message","status","retry","isEmpty","pendingErrors","pendingWarnings","concat","join","catch","err","code","recordCount","resolve","limit","min","response","messageCount","prevMessageCount","prevRecordCount","RecordCount","records","length","from","mergeMap","value","messages","method","path","token","ceil","MAX_AVAILABLE_TOKEN","options","url","headers","inspect","type","basicAuth","withCredentials","Authorization","tokenTimer","setInterval","provideToken","datasourceRequest","retryable","func","wait","setTimeout","promise","i","initialWait","pow","floor"],"mappings":"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","file":"querier.js","sourcesContent":["import _ from 'lodash';\nimport Observable from 'rxjs/Observable';\n\nexport class SumologicQuerier {\n    constructor(params, format, timeoutSec, useObservable, datasource, backendSrv) {\n        this.params = params;\n        this.format = format;\n        this.timeoutSec = timeoutSec;\n        this.useObservable = useObservable;\n        this.datasource = datasource;\n        this.backendSrv = backendSrv;\n        this.retryCount = 0;\n        this.offset = 0;\n        this.maximumOffset = 10000;\n    }\n\n    getResult() {\n        this.startTime = new Date();\n        if (!this.useObservable) {\n            return this.delay(() => {\n                return this.transition('CREATE_SEARCH_JOB');\n            }, Math.random() * 1000);\n        } else {\n            return Observable.defer(() => {\n                return this.delay(() => {\n                    return this.transition('CREATE_SEARCH_JOB');\n                }, Math.random() * 1000);\n            });\n        }\n    }\n\n    transition(state) {\n        this.state = state;\n        this.retryCount = 0;\n        if (!this.useObservable) {\n            return this.loop();\n        } else {\n            return this.loopForObservable();\n        }\n    }\n\n    retry() {\n        this.retryCount += 1;\n        return this.delay(() => {\n            if (!this.useObservable) {\n                return this.loop();\n            } else {\n                return this.loopForObservable();\n            }\n        }, this.calculateRetryWait(1000, this.retryCount));\n    }\n\n    loop() {\n        if (this.job) {\n            let now = new Date();\n            if (now - this.startTime > (this.timeoutSec * 1000)) {\n                return this.doRequest('DELETE', '/v1/search/jobs/' + this.job.data.id).then((result) => {\n                    return Promise.reject({ message: 'timeout' });\n                });\n            }\n        }\n\n        switch (this.state) {\n            case 'CREATE_SEARCH_JOB':\n                return this.doRequest('POST', '/v1/search/jobs', this.params).then((job) => {\n                    this.job = job;\n                    return this.transition('REQUEST_STATUS');\n                });\n                break;\n            case 'REQUEST_STATUS':\n                return this.doRequest('GET', '/v1/search/jobs/' + this.job.data.id).then((status) => {\n                    this.status = status;\n                    if (this.status.data.state !== 'DONE GATHERING RESULTS') {\n                        if (this.retryCount < 20) {\n                            return this.retry();\n                        } else {\n                            return Promise.reject({ message: 'max retries exceeded' });\n                        }\n                    }\n\n                    if (!_.isEmpty(this.status.data.pendingErrors) || !_.isEmpty(this.status.data.pendingWarnings)) {\n                        return Promise.reject({ message: this.status.data.pendingErrors.concat(this.status.data.pendingWarnings).join('\\n') });\n                    }\n                    return this.transition('REQUEST_RESULTS');\n                }).catch((err) => {\n                    if (err.data && err.data.code && err.data.code === 'unauthorized') {\n                        return Promise.reject(err);\n                    }\n                    // need to wait until job is created and registered\n                    if (this.retryCount < 6 && err.data && err.data.code && err.data.code === 'searchjob.jobid.invalid') {\n                        return this.retry();\n                    } else {\n                        return Promise.reject(err);\n                    }\n                });\n                break;\n            case 'REQUEST_RESULTS':\n                if (this.format === 'time_series_records' || this.format === 'records') {\n                    if (this.status.data.recordCount === 0) {\n                        return Promise.resolve([]);\n                    }\n                    let limit = Math.min(this.maximumOffset, this.status.data.recordCount);\n                    return this.doRequest('GET', '/v1/search/jobs/' + this.job.data.id + '/records?offset=0&limit=' + limit).then((response) => {\n                        return response.data;\n                    });\n                } else if (this.format === 'messages') {\n                    if (this.status.data.messageCount === 0) {\n                        return Promise.resolve([]);\n                    }\n                    let limit = Math.min(this.maximumOffset, this.status.data.messageCount);\n                    return this.doRequest('GET', '/v1/search/jobs/' + this.job.data.id + '/messages?offset=0&limit=' + limit).then((response) => {\n                        return response.data;\n                    });\n                } else {\n                    return Promise.reject({ message: 'unsupported type' });\n                }\n                break;\n        }\n    }\n\n    loopForObservable() {\n        if (this.job) {\n            let now = new Date();\n            if (now - this.startTime > (this.timeoutSec * 1000)) {\n                return this.doRequest('DELETE', '/v1/search/jobs/' + this.job.data.id).then((result) => {\n                    return Promise.reject({ message: 'timeout' });\n                });\n            }\n        }\n\n        switch (this.state) {\n            case 'CREATE_SEARCH_JOB':\n                return this.doRequest('POST', '/v1/search/jobs', this.params).then((job) => {\n                    this.job = job;\n                    return this.transition('REQUEST_STATUS');\n                });\n                break;\n            case 'REQUEST_STATUS':\n                return this.doRequest('GET', '/v1/search/jobs/' + this.job.data.id).then((status) => {\n                    this.status = status;\n                    let prevMessageCount = this.messageCount;\n                    let prevRecordCount = this.RecordCount;\n                    this.messageCount = this.status.data.messageCount;\n                    this.recordCount = this.status.data.recordCount;\n\n                    if (!_.isEmpty(this.status.data.pendingErrors) || !_.isEmpty(this.status.data.pendingWarnings)) {\n                        return Promise.reject({ message: this.status.data.pendingErrors.concat(this.status.data.pendingWarnings).join('\\n') });\n                    }\n\n                    if (this.status.data.state === 'DONE GATHERING RESULTS') {\n                        return this.transition('REQUEST_RESULTS');\n                    }\n\n                    if ((this.format === 'time_series_records' || this.format === 'records') && this.recordCount > prevRecordCount) {\n                        return this.transition('REQUEST_RESULTS');\n                    }\n                    if (this.format === 'messages' && this.messageCount > prevMessageCount) {\n                        return this.transition('REQUEST_RESULTS');\n                    }\n\n                    // wait for new result arrival\n                    return this.transition('REQUEST_STATUS');\n                }).catch((err) => {\n                    if (err.data && err.data.code && err.data.code === 'unauthorized') {\n                        return Promise.reject(err);\n                    }\n                    // need to wait until job is created and registered\n                    if (this.retryCount < 6 && err.data && err.data.code && err.data.code === 'searchjob.jobid.invalid') {\n                        return this.retry();\n                    } else {\n                        return Promise.reject(err);\n                    }\n                });\n                break;\n            case 'REQUEST_RESULTS':\n                if (this.format === 'time_series_records' || this.format === 'records') {\n                    let limit = Math.min(this.maximumOffset, this.status.data.recordCount) - this.offset;\n                    return this.doRequest('GET', '/v1/search/jobs/' + this.job.data.id + '/records?offset=' + this.offset + '&limit=' + limit).then((response) => {\n                        this.offset += response.data.records.length;\n                        if (this.status.data.state === 'DONE GATHERING RESULTS' || this.offset >= this.maximumOffset) {\n                            return Observable.from([response.data]);\n                        }\n                        return Observable.from([response.data])\n                            .concat(\n                                Observable.defer(() => {\n                                    return this.transition('REQUEST_STATUS');\n                                }).mergeMap(value => value)\n                            );\n                    });\n                } else if (this.format === 'messages') {\n                    let limit = Math.min(this.maximumOffset, this.status.data.messageCount) - this.offset;\n                    return this.doRequest('GET', '/v1/search/jobs/' + this.job.data.id + '/messages?offset=' + this.offset + '&limit=' + limit).then((response) => {\n                        this.offset += response.data.messages.length;\n                        if (this.status.data.state === 'DONE GATHERING RESULTS' || this.offset >= this.maximumOffset) {\n                            return Observable.from([response.data]);\n                        }\n                        return Observable.from([response.data])\n                            .concat(\n                                Observable.defer(() => {\n                                    return this.transition('REQUEST_STATUS');\n                                }).mergeMap(value => value)\n                            );\n                    });\n                } else {\n                    return Promise.reject({ message: 'unsupported type' });\n                }\n                break;\n        }\n    }\n\n    doRequest(method, path, params) {\n        if (this.datasource.token === 0) {\n            return this.delay(() => {\n                return this.doRequest(method, path, params);\n            }, Math.ceil(1000 / this.datasource.MAX_AVAILABLE_TOKEN));\n        }\n\n        let options = {\n            method: method,\n            url: this.datasource.url + path,\n            data: params,\n            headers: {},\n            inspect: { type: 'sumologic' }\n        };\n\n        if (this.datasource.basicAuth || this.datasource.withCredentials) {\n            options.withCredentials = true;\n        }\n        if (this.datasource.basicAuth) {\n            options.headers.Authorization = this.datasource.basicAuth;\n        }\n        options.headers['Content-Type'] = 'application/json';\n\n        this.datasource.token--;\n        if (this.datasource.tokenTimer === null) {\n            this.datasource.tokenTimer = setInterval(() => {\n                this.datasource.provideToken();\n            }, Math.ceil(1000 / this.datasource.MAX_AVAILABLE_TOKEN));\n        }\n\n        return this.backendSrv.datasourceRequest(options).catch((err) => {\n            if (err.data && err.data.code && err.data.code === 'rate.limit.exceeded') {\n                this.datasource.token = 0;\n                return this.retryable(3, (retryCount) => {\n                    return this.delay(() => {\n                        return this.backendSrv.datasourceRequest(options);\n                    }, this.calculateRetryWait(1000, retryCount));\n                });\n            } else {\n                return Promise.reject(err);\n            }\n        });\n    }\n\n    delay(func, wait) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                func().then(resolve, reject);\n            }, wait);\n        });\n    }\n\n    retryable(retryCount, func) {\n        let promise = Promise.reject({}).catch(() => func(retryCount));\n        for (let i = 0; i < retryCount; i++) {\n            ((i) => {\n                promise = promise.catch(err => func(i + 1));\n            })(i);\n        }\n        return promise;\n    }\n\n    calculateRetryWait(initialWait, retryCount) {\n        return initialWait * Math.min(10, Math.pow(2, retryCount)) +\n            Math.floor(Math.random() * 1000);\n    }\n}\n"]}
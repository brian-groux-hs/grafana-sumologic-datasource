{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","angular","dateMath","TableModel","SumologicDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","url","basicAuth","withCredentials","options","queries","map","targets","target","params","query","replace","scopedVars","from","String","convertTime","range","to","timeZone","logQuery","format","Promise","all","then","result","each","responses","response","index","push","transformRecordsToTimeSeries","data","records","tableResponses","filter","flatten","length","transformDataToTable","annotation","tagKeys","split","titleFormat","textFormat","resolve","eventList","messages","message","tags","chain","v","k","includes","value","time","parseInt","title","renderTemplate","text","status","timeoutSec","startTime","Date","doRequest","job","loop","id","now","reject","state","delay","limit","Math","min","recordCount","messageCount","catch","err","code","method","path","headers","inspect","Authorization","datasourceRequest","func","wait","setTimeout","table","fields","d","uniq","columns","c","forEach","r","row","key","rows","metricLabel","dps","datapoints","createMetricLabel","parseFloat","sort","a","b","record","isUndefined","isEmpty","aliasFormat","aliasPattern","aliasData","aliasRegex","match","g1","date","roundUp","isString","parse","valueOf"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport angular from 'angular';\nimport dateMath from 'app/core/utils/datemath';\nimport TableModel from 'app/core/table_model';\n\nexport class SumologicDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.url = instanceSettings.url;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    let queries = _.map(options.targets, (target) => {\n      let params = {\n        query: this.templateSrv.replace(target.query, options.scopedVars),\n        from: String(this.convertTime(options.range.from, false)),\n        to: String(this.convertTime(options.range.to, true)),\n        timeZone: 'Etc/UTC'\n      };\n      return this.logQuery(params, target.format)\n    })\n\n    return Promise.all(queries).then(responses => {\n      let result = [];\n\n      _.each(responses, (response, index) => {\n        if (options.targets[index].format === 'time_series') {\n          result.push(this.transformRecordsToTimeSeries(response.data.records, options.targets[index]));\n        }\n      });\n\n      let tableResponses = _.filter(responses, (response, index) => {\n        return options.targets[index].format === 'records'\n          || options.targets[index].format === 'messages';\n      })\n      .map((response) => {\n        return response.data;\n      })\n      .flatten();\n      if (tableResponses.length > 0) {\n        result.push(this.transformDataToTable(tableResponses));\n      }\n\n      return { data: result };\n    });\n  }\n\n  annotationQuery(options) {\n    let annotation = options.annotation;\n    let query = annotation.query || '';\n    let tagKeys = annotation.tagKeys || '';\n    tagKeys = tagKeys.split(',');\n    let titleFormat = annotation.titleFormat || '';\n    let textFormat = annotation.textFormat || '';\n\n    if (!query) { return Promise.resolve([]); }\n\n    let params = {\n      query: this.templateSrv.replace(query),\n      from: String(this.convertTime(options.range.from, false)),\n      to: String(this.convertTime(options.range.to, true)),\n      timeZone: 'Etc/UTC'\n    };\n    return this.logQuery(params, 'messages').then((result) => {\n      let eventList = result.data.messages.map((message) => {\n        let tags = _.chain(message.map)\n          .filter((v, k) => {\n            return _.includes(tagKeys, k);\n          }).value();\n\n        return {\n          annotation: annotation,\n          time: parseInt(message.map['_messagetime'], 10),\n          title: this.renderTemplate(titleFormat, message.map),\n          tags: tags,\n          text: this.renderTemplate(textFormat, message.map)\n        };\n      });\n\n      return eventList;\n    });\n  }\n\n  testDatasource() {\n    return Promise.resolve({ status: 'success', message: 'Data source is working', title: 'Success' });\n  }\n\n  logQuery(params, format) {\n    let timeoutSec = 30;\n    let startTime = new Date();\n    return this.doRequest('POST', '/search/jobs', params).then((job) => {\n      let loop = () => {\n        return this.doRequest('GET', '/search/jobs/' + job.data.id).then((status) => {\n          let now = new Date();\n          if (now - startTime > (timeoutSec * 1000)) {\n            return this.doRequest('DELETE', '/search/jobs/' + job.data.id).then((result) => {\n              return Promise.reject({ message: 'timeout' });\n            });\n          }\n\n          if (status.data.state !== 'DONE GATHERING RESULTS') {\n            return this.delay(loop, 1000);\n          }\n\n          if (format === 'time_series' || format === 'records') {\n            let limit = Math.min(10000, status.data.recordCount);\n            return this.doRequest('GET', '/search/jobs/' + job.data.id + '/records?offset=0&limit=' + limit).then((records) => {\n              return records;\n            });\n          } else if (format === 'messages') {\n            let limit = Math.min(10000, status.data.messageCount);\n            return this.doRequest('GET', '/search/jobs/' + job.data.id + '/messages?offset=0&limit=' + limit).then((messages) => {\n              return messages;\n            });\n          } else {\n            return Promise.reject({ message: 'unsupported type' });\n          }\n        }).catch((err) => {\n          // need to wait until job is created and registered\n          if (err.data.code === 'searchjob.jobid.invalid') {\n            return this.delay(loop, 1000);\n          } else {\n            return Promise.reject(err);\n          }\n        });\n      };\n\n      return this.delay(() => {\n        return loop().then((result) => {\n          return result;\n        });\n      }, 0);\n    });\n  }\n\n  doRequest(method, path, params) {\n    let options = {\n      method: method,\n      url: this.url + path,\n      data: params,\n      headers: {},\n      inspect: { type: 'sumologic' }\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    options.headers['Content-Type'] = 'application/json';\n\n    return this.backendSrv.datasourceRequest(options).catch((err) => {\n      if (err.data.code === 'rate.limit.exceeded') {\n        return this.delay(() => {\n          return this.backendSrv.datasourceRequest(options);\n        }, 5000);\n      } else {\n        return Promise.reject(err);\n      }\n    });\n  }\n\n  delay(func, wait) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        func().then(resolve, reject);\n      }, wait);\n    });\n  }\n\n  transformDataToTable(data) {\n    let table = new TableModel();\n\n    if (data.length === 0) {\n      return table;\n    }\n\n    let type = data[0].records ? 'records' : 'messages';\n\n    let fields = _.chain(data)\n      .map((d) => {\n        return _.map(d.fields, 'name');\n      })\n      .flatten().uniq().value();\n\n    // columns\n    table.columns = fields.map((c) => {\n      return { text: c };\n    });\n\n    // rows\n    data.forEach((d) => {\n      for (let r of d[type]) {\n        let row = [];\n        for (let key of fields) {\n          row.push(r.map[key] || '');\n        }\n        table.rows.push(row);\n      }\n    });\n\n    return table;\n  }\n\n  transformRecordsToTimeSeries(records, target) {\n    let metricLabel = '';\n    let dps = [];\n\n    if (records.length === 0) {\n      return { target: metricLabel, datapoints: dps };\n    }\n\n    metricLabel = this.createMetricLabel(records[0].map, target);\n    dps = records\n    .map((r) => {\n      return [parseFloat(r.map['_count']), parseInt(r.map['_timeslice'], 10)];\n    })\n    .sort((a, b) => {\n      if (a[1] < b[1]) {\n        return -1;\n      } else if (a[1] > b[1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    })\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(record, target) {\n    if (_.isUndefined(target) || _.isEmpty(target.aliasFormat)) {\n      return '';\n    }\n\n    return this.renderTemplate(this.templateSrv.replace(target.aliasFormat), record) || '{}';\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, function (match, g1) {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n\n  convertTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return date.valueOf();\n  }\n}\n"]}
{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","angular","dateMath","TableModel","SumologicDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","name","url","basicAuth","withCredentials","options","queries","map","targets","target","params","query","replace","stripComment","scopedVars","from","convertTime","range","to","timeZone","logQuery","format","Promise","all","then","result","each","responses","response","index","push","transformRecordsToTimeSeries","records","tableResponses","filter","flatten","length","transformDataToTable","data","timeRange","recordValuesQuery","match","recordKey","toLowerCase","String","r","text","value","annotation","tagKeys","split","titleFormat","textFormat","resolve","eventList","messages","message","tags","chain","v","k","includes","time","parseInt","title","renderTemplate","Date","getTime","status","timeoutSec","startTime","doRequest","job","loop","id","now","reject","state","delay","recordCount","limit","Math","min","messageCount","catch","err","code","method","path","headers","inspect","Authorization","datasourceRequest","func","wait","setTimeout","table","fields","d","uniq","columns","c","forEach","row","key","rows","metricLabel","dps","datapoints","createMetricLabel","parseFloat","sort","a","b","record","isUndefined","isEmpty","aliasFormat","aliasPattern","aliasData","aliasRegex","g1","q","join","date","roundUp","isString","parse","valueOf"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport angular from 'angular';\nimport dateMath from 'app/core/utils/datemath';\nimport TableModel from 'app/core/table_model';\n\nexport class SumologicDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.url = instanceSettings.url;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n  }\n\n  query(options) {\n    let queries = _.map(options.targets, (target) => {\n      let params = {\n        query: this.templateSrv.replace(this.stripComment(target.query), options.scopedVars),\n        from: this.convertTime(options.range.from, false),\n        to: this.convertTime(options.range.to, true),\n        timeZone: 'Etc/UTC'\n      };\n      return this.logQuery(params, target.format)\n    })\n\n    return Promise.all(queries).then(responses => {\n      let result = [];\n\n      _.each(responses, (response, index) => {\n        if (options.targets[index].format === 'time_series_records') {\n          result.push(this.transformRecordsToTimeSeries(response.records, options.targets[index]));\n        }\n      });\n\n      let tableResponses = _.filter(responses, (response, index) => {\n        return options.targets[index].format === 'records'\n          || options.targets[index].format === 'messages';\n      }).flatten();\n      if (tableResponses.length > 0) {\n        result.push(this.transformDataToTable(tableResponses));\n      }\n\n      return { data: result };\n    });\n  }\n\n  metricFindQuery(query) {\n    let range = this.timeSrv.timeRange();\n\n    let recordValuesQuery = query.match(/^record_values\\(([^,]+?),\\s?([^\\)]+?)\\)/);\n    if (recordValuesQuery) {\n      let recordKey = recordValuesQuery[1].toLowerCase();\n      let query = recordValuesQuery[2];\n      let params = {\n        query: this.templateSrv.replace(this.stripComment(query)),\n        from: String(this.convertTime(range.from, false)),\n        to: String(this.convertTime(range.to, true)),\n        timeZone: 'Etc/UTC'\n      };\n      return this.logQuery(params, 'records').then((result) => {\n        return result.records.map((r) => {\n          return {\n            text: r.map[recordKey],\n            value: r.map[recordKey]\n          };\n        })\n      });\n    }\n  }\n\n  annotationQuery(options) {\n    let annotation = options.annotation;\n    let query = annotation.query || '';\n    let tagKeys = annotation.tagKeys || '';\n    tagKeys = tagKeys.split(',');\n    let titleFormat = annotation.titleFormat || '';\n    let textFormat = annotation.textFormat || '';\n\n    if (!query) { return Promise.resolve([]); }\n\n    let params = {\n      query: this.templateSrv.replace(this.stripComment(query)),\n      from: String(this.convertTime(options.range.from, false)),\n      to: String(this.convertTime(options.range.to, true)),\n      timeZone: 'Etc/UTC'\n    };\n    return this.logQuery(params, 'messages').then((result) => {\n      let eventList = result.messages.map((message) => {\n        let tags = _.chain(message.map)\n          .filter((v, k) => {\n            return _.includes(tagKeys, k);\n          }).value();\n\n        return {\n          annotation: annotation,\n          time: parseInt(message.map['_messagetime'], 10),\n          title: this.renderTemplate(titleFormat, message.map),\n          tags: tags,\n          text: this.renderTemplate(textFormat, message.map)\n        };\n      });\n\n      return eventList;\n    });\n  }\n\n  testDatasource() {\n    let params = {\n      query: '| count _sourceCategory',\n      from: (new Date()).getTime() - 10 * 60 * 1000,\n      to: (new Date()).getTime(),\n      timeZone: 'Etc/UTC'\n    };\n    return this.logQuery(params, 'records').then((response) => {\n      return { status: 'success', message: 'Data source is working', title: 'Success' };\n    });\n  }\n\n  logQuery(params, format) {\n    let timeoutSec = 30;\n    let startTime = new Date();\n    return this.doRequest('POST', '/v1/search/jobs', params).then((job) => {\n      let loop = () => {\n        return this.doRequest('GET', '/v1/search/jobs/' + job.data.id).then((status) => {\n          let now = new Date();\n          if (now - startTime > (timeoutSec * 1000)) {\n            return this.doRequest('DELETE', '/v1/search/jobs/' + job.data.id).then((result) => {\n              return Promise.reject({ message: 'timeout' });\n            });\n          }\n\n          if (status.data.state !== 'DONE GATHERING RESULTS') {\n            return this.delay(loop, 1000);\n          }\n\n\n          if (format === 'time_series_records' || format === 'records') {\n            if (status.data.recordCount === 0) {\n              return Promise.resolve([]);\n            }\n            let limit = Math.min(10000, status.data.recordCount);\n            return this.doRequest('GET', '/v1/search/jobs/' + job.data.id + '/records?offset=0&limit=' + limit).then((response) => {\n              return response.data;\n            });\n          } else if (format === 'messages') {\n            if (status.data.messageCount === 0) {\n              return Promise.resolve([]);\n            }\n            let limit = Math.min(10000, status.data.messageCount);\n            return this.doRequest('GET', '/v1/search/jobs/' + job.data.id + '/messages?offset=0&limit=' + limit).then((response) => {\n              return response.data;\n            });\n          } else {\n            return Promise.reject({ message: 'unsupported type' });\n          }\n        }).catch((err) => {\n          // need to wait until job is created and registered\n          if (err.data.code === 'searchjob.jobid.invalid') {\n            return this.delay(loop, 1000);\n          } else {\n            return Promise.reject(err);\n          }\n        });\n      };\n\n      return this.delay(() => {\n        return loop().then((result) => {\n          return result;\n        });\n      }, 0);\n    });\n  }\n\n  doRequest(method, path, params) {\n    let options = {\n      method: method,\n      url: this.url + path,\n      data: params,\n      headers: {},\n      inspect: { type: 'sumologic' }\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    options.headers['Content-Type'] = 'application/json';\n\n    return this.backendSrv.datasourceRequest(options).catch((err) => {\n      if (err.data.code === 'rate.limit.exceeded') {\n        return this.delay(() => {\n          return this.backendSrv.datasourceRequest(options);\n        }, 5000);\n      } else {\n        return Promise.reject(err);\n      }\n    });\n  }\n\n  delay(func, wait) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        func().then(resolve, reject);\n      }, wait);\n    });\n  }\n\n  transformDataToTable(data) {\n    let table = new TableModel();\n\n    if (data.length === 0) {\n      return table;\n    }\n\n    let type = data[0].records ? 'records' : 'messages';\n\n    let fields = _.chain(data)\n      .map((d) => {\n        return _.map(d.fields, 'name');\n      })\n      .flatten().uniq().value();\n\n    // columns\n    table.columns = fields.map((c) => {\n      return { text: c };\n    });\n\n    // rows\n    data.forEach((d) => {\n      for (let r of d[type]) {\n        let row = [];\n        for (let key of fields) {\n          row.push(r.map[key] || '');\n        }\n        table.rows.push(row);\n      }\n    });\n\n    return table;\n  }\n\n  transformRecordsToTimeSeries(records, target) {\n    let metricLabel = '';\n    let dps = [];\n\n    if (records.length === 0) {\n      return { target: metricLabel, datapoints: dps };\n    }\n\n    metricLabel = this.createMetricLabel(records[0].map, target);\n    dps = records\n      .map((r) => {\n        return [parseFloat(r.map['_count']), parseInt(r.map['_timeslice'], 10)];\n      })\n      .sort((a, b) => {\n        if (a[1] < b[1]) {\n          return -1;\n        } else if (a[1] > b[1]) {\n          return 1;\n        } else {\n          return 0;\n        }\n      })\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(record, target) {\n    if (_.isUndefined(target) || _.isEmpty(target.aliasFormat)) {\n      return '';\n    }\n\n    return this.renderTemplate(this.templateSrv.replace(target.aliasFormat), record) || '{}';\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, function (match, g1) {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n\n  stripComment(query) {\n    return query.split(\"\\n\").map(q => {\n      return q.replace(/(\\/\\*([\\s\\S]*?)\\*\\/)|(\\/\\/(.*)$)/gm, '');\n    }).filter(q => {\n      return q !== \"\";\n    }).join(\"\\n\");\n  }\n\n  convertTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return date.valueOf();\n  }\n}\n"]}
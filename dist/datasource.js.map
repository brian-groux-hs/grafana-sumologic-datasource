{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","angular","dateMath","TableModel","SumologicDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","name","url","basicAuth","withCredentials","timeoutSec","jsonData","timeout","fieldIndex","tagKeys","Set","tagValues","excludeFieldList","options","queries","chain","targets","filter","target","hide","query","map","params","replace","stripComment","scopedVars","from","convertTime","range","to","timeZone","adhocFilters","getAdhocFilters","length","filterQuery","f","operator","key","value","join","indexOf","logQuery","format","Promise","all","then","result","hasAdhocFilter","responses","forEach","r","fields","includes","add","records","messages","Object","keys","d","tagKey","each","response","index","concat","transformRecordsToTimeSeries","valueOf","tableResponses","flatten","push","transformDataToTable","data","timeRange","recordValuesQuery","match","recordKey","toLowerCase","String","text","annotation","split","titleFormat","textFormat","resolve","eventList","message","tags","v","k","time","parseInt","title","renderTemplate","Date","getTime","status","startTime","doRequest","job","loop","id","now","reject","state","delay","pendingErrors","pendingWarnings","recordCount","limit","Math","min","messageCount","catch","err","code","method","path","headers","inspect","Authorization","datasourceRequest","func","wait","setTimeout","table","uniq","columns","c","filterable","row","rows","defaultValue","metricLabel","dps","datapoints","keyField","find","fieldType","valueField","sort","a","b","createMetricLabel","parseFloat","record","isUndefined","isEmpty","aliasFormat","aliasPattern","aliasData","aliasRegex","g1","q","date","roundUp","isString","parse","some","variables","variable","Array"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport angular from 'angular';\nimport dateMath from 'app/core/utils/datemath';\nimport TableModel from 'app/core/table_model';\n\nexport class SumologicDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.url = instanceSettings.url;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.timeoutSec = instanceSettings.jsonData.timeout || 30;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n    this.fieldIndex = {\n      tagKeys: new Set(),\n      tagValues: {}\n    };\n    this.excludeFieldList = [\n      '_raw', '_collectorid', '_sourceid', '_messageid', '_messagecount', '_messagetime', '_receipttime',\n      '_size', '_timeslice', 'processing_time_ms'\n    ];\n  }\n\n  query(options) {\n    let queries = _.chain(options.targets)\n      .filter((target) => {\n        return !target.hide && target.query;\n      })\n      .map((target) => {\n        let params = {\n          query: this.templateSrv.replace(this.stripComment(target.query), options.scopedVars),\n          from: this.convertTime(options.range.from, false),\n          to: this.convertTime(options.range.to, true),\n          timeZone: 'Etc/UTC'\n        };\n        let adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n        if (adhocFilters.length > 0) {\n          let filterQuery = ' | where ' + adhocFilters.map(f => {\n            switch (f.operator) {\n              case '=~':\n                return f.key + ' ' + 'matches' + ' \"' + f.value + '\"';\n              case '!~':\n                return '!(' + f.key + ' ' + 'matches' + ' \"' + f.value + '\"' + ')';\n              default:\n                return f.key + ' ' + f.operator + ' \"' + f.value + '\"';\n            }\n          }).join(' and ');\n          if (params.query.indexOf('|') === -1) {\n            params.query += filterQuery;\n          } else {\n            params.query = params.query.replace(/\\|/, filterQuery + ' |');\n          }\n        }\n        return this.logQuery(params, target.format)\n      }).value();\n\n    return Promise.all(queries).then(responses => {\n      let result = [];\n\n      if (this.hasAdhocFilter()) {\n        this.fieldIndex = {\n          tagKeys: new Set(),\n          tagValues: {}\n        };\n\n        // build fieldIndex\n        responses.forEach(r => {\n          r.fields.map(f => {\n            return f.name;\n          }).filter(name => {\n            return !this.excludeFieldList.includes(name);\n          }).forEach(name => {\n            this.fieldIndex.tagKeys.add(name);\n          });\n        });\n\n        responses.forEach(r => {\n          (r.records || r.messages).forEach(d => {\n            Object.keys(d.map).filter(tagKey => {\n              return !this.excludeFieldList.includes(tagKey);\n            }).forEach(tagKey => {\n              if (!this.fieldIndex.tagValues[tagKey]) {\n                this.fieldIndex.tagValues[tagKey] = new Set();\n              }\n              this.fieldIndex.tagValues[tagKey].add(d.map[tagKey]);\n            });\n          });\n        });\n      }\n\n      _.each(responses, (response, index) => {\n        if (options.targets[index].format === 'time_series_records') {\n          result = result.concat(this.transformRecordsToTimeSeries(response, options.targets[index], options.range.to.valueOf()));\n        }\n      });\n\n      let tableResponses = _.chain(responses)\n        .filter((response, index) => {\n          return options.targets[index].format === 'records' || options.targets[index].format === 'messages';\n        })\n        .flatten()\n        .value();\n\n      if (tableResponses.length > 0) {\n        result.push(this.transformDataToTable(tableResponses));\n      }\n\n      return { data: result };\n    });\n  }\n\n  metricFindQuery(query) {\n    let range = this.timeSrv.timeRange();\n\n    let recordValuesQuery = query.match(/^record_values\\(([^,]+?),\\s?([^\\)]+?)\\)/);\n    if (recordValuesQuery) {\n      let recordKey = recordValuesQuery[1].toLowerCase();\n      let query = recordValuesQuery[2];\n      let params = {\n        query: this.templateSrv.replace(this.stripComment(query)),\n        from: String(this.convertTime(range.from, false)),\n        to: String(this.convertTime(range.to, true)),\n        timeZone: 'Etc/UTC'\n      };\n      return this.logQuery(params, 'records').then((result) => {\n        return result.records.map((r) => {\n          return {\n            text: r.map[recordKey],\n            value: r.map[recordKey]\n          };\n        })\n      });\n    }\n  }\n\n  annotationQuery(options) {\n    let annotation = options.annotation;\n    let query = annotation.query || '';\n    let tagKeys = annotation.tagKeys || '';\n    tagKeys = tagKeys.split(',');\n    let titleFormat = annotation.titleFormat || '';\n    let textFormat = annotation.textFormat || '';\n\n    if (!query) { return Promise.resolve([]); }\n\n    let params = {\n      query: this.templateSrv.replace(this.stripComment(query)),\n      from: String(this.convertTime(options.range.from, false)),\n      to: String(this.convertTime(options.range.to, true)),\n      timeZone: 'Etc/UTC'\n    };\n    return this.logQuery(params, 'messages').then((result) => {\n      let eventList = result.messages.map((message) => {\n        let tags = _.chain(message.map)\n          .filter((v, k) => {\n            return _.includes(tagKeys, k);\n          }).value();\n\n        return {\n          annotation: annotation,\n          time: parseInt(message.map['_messagetime'], 10),\n          title: this.renderTemplate(titleFormat, message.map),\n          tags: tags,\n          text: this.renderTemplate(textFormat, message.map)\n        };\n      });\n\n      return eventList;\n    });\n  }\n\n  testDatasource() {\n    let params = {\n      query: '| count _sourceCategory',\n      from: (new Date()).getTime() - 10 * 60 * 1000,\n      to: (new Date()).getTime(),\n      timeZone: 'Etc/UTC'\n    };\n    return this.logQuery(params, 'records').then((response) => {\n      return { status: 'success', message: 'Data source is working', title: 'Success' };\n    });\n  }\n\n  logQuery(params, format) {\n    let startTime = new Date();\n    return this.doRequest('POST', '/v1/search/jobs', params).then((job) => {\n      let loop = () => {\n        return this.doRequest('GET', '/v1/search/jobs/' + job.data.id).then((status) => {\n          let now = new Date();\n          if (now - startTime > (this.timeoutSec * 1000)) {\n            return this.doRequest('DELETE', '/v1/search/jobs/' + job.data.id).then((result) => {\n              return Promise.reject({ message: 'timeout' });\n            });\n          }\n\n          if (status.data.state !== 'DONE GATHERING RESULTS') {\n            return this.delay(loop, 1000);\n          }\n\n          if (status.data.pendingErrors.length !== 0 || status.data.pendingWarnings.length !== 0) {\n            return Promise.reject({ message: status.data.pendingErrors.concat(status.data.pendingWarnings).join('\\n') });\n          }\n\n          if (format === 'time_series_records' || format === 'records') {\n            if (status.data.recordCount === 0) {\n              return Promise.resolve([]);\n            }\n            let limit = Math.min(10000, status.data.recordCount);\n            return this.doRequest('GET', '/v1/search/jobs/' + job.data.id + '/records?offset=0&limit=' + limit).then((response) => {\n              return response.data;\n            });\n          } else if (format === 'messages') {\n            if (status.data.messageCount === 0) {\n              return Promise.resolve([]);\n            }\n            let limit = Math.min(10000, status.data.messageCount);\n            return this.doRequest('GET', '/v1/search/jobs/' + job.data.id + '/messages?offset=0&limit=' + limit).then((response) => {\n              return response.data;\n            });\n          } else {\n            return Promise.reject({ message: 'unsupported type' });\n          }\n        }).catch((err) => {\n          // need to wait until job is created and registered\n          if (err.data && err.data.code && err.data.code === 'searchjob.jobid.invalid') {\n            return this.delay(loop, 1000);\n          } else {\n            return Promise.reject(err);\n          }\n        });\n      };\n\n      return this.delay(() => {\n        return loop().then((result) => {\n          return result;\n        });\n      }, 0);\n    });\n  }\n\n  doRequest(method, path, params) {\n    let options = {\n      method: method,\n      url: this.url + path,\n      data: params,\n      headers: {},\n      inspect: { type: 'sumologic' }\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    options.headers['Content-Type'] = 'application/json';\n\n    return this.backendSrv.datasourceRequest(options).catch((err) => {\n      if (err.data && err.data.code && err.data.code === 'rate.limit.exceeded') {\n        return this.delay(() => {\n          return this.backendSrv.datasourceRequest(options);\n        }, 5000);\n      } else {\n        return Promise.reject(err);\n      }\n    });\n  }\n\n  delay(func, wait) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        func().then(resolve, reject);\n      }, wait);\n    });\n  }\n\n  transformDataToTable(data) {\n    let table = new TableModel();\n\n    if (data.length === 0) {\n      return table;\n    }\n\n    let type = data[0].records ? 'records' : 'messages';\n\n    let fields = _.chain(data)\n      .map((d) => {\n        return _.map(d.fields, 'name');\n      })\n      .flatten().uniq().value();\n\n    // columns\n    table.columns = fields.map((c) => {\n      return { text: c, filterable: true };\n    });\n\n    // rows\n    data.forEach((d) => {\n      for (let r of d[type]) {\n        let row = [];\n        for (let key of fields) {\n          row.push(r.map[key] || '');\n        }\n        table.rows.push(row);\n      }\n    });\n\n    return table;\n  }\n\n  transformRecordsToTimeSeries(response, target, defaultValue) {\n    let metricLabel = '';\n    let dps = [];\n    let fields = response.fields;\n    let records = response.records;\n\n    if (records.length === 0) {\n      return { target: metricLabel, datapoints: dps };\n    }\n\n    let keyField = fields.find((f) => {\n      return f.fieldType != 'string' && f.keyField;\n    });\n    keyField = keyField ? keyField.name : '';\n    let valueField = fields.find((f) => {\n      return f.fieldType != 'string' && !f.keyField;\n    });\n    if (!valueField) {\n      return { target: metricLabel, datapoints: dps };\n    }\n    valueField = valueField.name;\n\n    let result = {};\n    records.sort((a, b) => {\n      if (keyField === '') {\n        return 0;\n      }\n      if (a.map[keyField] < b.map[keyField]) {\n        return -1;\n      } else if (a.map[keyField] > b.map[keyField]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }).forEach((r) => {\n      metricLabel = this.createMetricLabel(r.map, target);\n      result[metricLabel] = result[metricLabel] || [];\n      result[metricLabel].push([parseFloat(r.map[valueField]), parseFloat(r.map[keyField] || defaultValue)]);\n    });\n\n    return _.map(result, (v, k) => {\n      return { target: k, datapoints: v };\n    });\n  }\n\n  createMetricLabel(record, target) {\n    if (_.isUndefined(target) || _.isEmpty(target.aliasFormat)) {\n      return '';\n    }\n\n    return this.renderTemplate(this.templateSrv.replace(target.aliasFormat), record) || '{}';\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, function (match, g1) {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n\n  stripComment(query) {\n    return query.split(\"\\n\").map(q => {\n      return q.replace(/(\\/\\*([\\s\\S]*?)\\*\\/)|(\\/\\/(.*)$)/gm, '');\n    }).filter(q => {\n      return q !== \"\";\n    }).join(\"\\n\");\n  }\n\n  convertTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return date.valueOf();\n  }\n\n  hasAdhocFilter() {\n    return _.some(this.templateSrv.variables, variable => {\n      return variable.type === 'adhoc';\n    });\n  }\n\n  getTagKeys(options) {\n    return Promise.resolve(Array.from(this.fieldIndex.tagKeys).map(k => {\n      return {\n        type: 'key',\n        text: k\n      };\n    }));\n  }\n\n  getTagValues(options) {\n    return Promise.resolve(Array.from(this.fieldIndex.tagValues[options.key]).map(v => {\n      return {\n        type: 'value',\n        text: v\n      };\n    }));\n  }\n}\n"]}
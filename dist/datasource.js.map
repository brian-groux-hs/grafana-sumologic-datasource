{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","angular","dateMath","TableModel","SumologicDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","name","url","basicAuth","withCredentials","timeoutSec","jsonData","timeout","options","queries","chain","targets","filter","target","hide","query","map","params","replace","stripComment","scopedVars","from","convertTime","range","to","timeZone","logQuery","format","value","Promise","all","then","result","each","responses","response","index","concat","transformRecordsToTimeSeries","valueOf","tableResponses","flatten","length","push","transformDataToTable","data","timeRange","recordValuesQuery","match","recordKey","toLowerCase","String","records","r","text","annotation","tagKeys","split","titleFormat","textFormat","resolve","eventList","messages","message","tags","v","k","includes","time","parseInt","title","renderTemplate","Date","getTime","status","startTime","doRequest","job","loop","id","now","reject","state","delay","pendingErrors","pendingWarnings","join","recordCount","limit","Math","min","messageCount","catch","err","code","method","path","headers","inspect","Authorization","datasourceRequest","func","wait","setTimeout","table","fields","d","uniq","columns","c","forEach","row","key","rows","defaultValue","metricLabel","dps","datapoints","keyField","find","f","fieldType","valueField","sort","a","b","createMetricLabel","parseFloat","record","isUndefined","isEmpty","aliasFormat","aliasPattern","aliasData","aliasRegex","g1","q","date","roundUp","isString","parse"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport angular from 'angular';\nimport dateMath from 'app/core/utils/datemath';\nimport TableModel from 'app/core/table_model';\n\nexport class SumologicDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.url = instanceSettings.url;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.timeoutSec = instanceSettings.jsonData.timeout || 30;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n  }\n\n  query(options) {\n    let queries = _.chain(options.targets)\n      .filter((target) => {\n        return !target.hide && target.query;\n      })\n      .map((target) => {\n        let params = {\n          query: this.templateSrv.replace(this.stripComment(target.query), options.scopedVars),\n          from: this.convertTime(options.range.from, false),\n          to: this.convertTime(options.range.to, true),\n          timeZone: 'Etc/UTC'\n        };\n        return this.logQuery(params, target.format)\n      }).value();\n\n    return Promise.all(queries).then(responses => {\n      let result = [];\n\n      _.each(responses, (response, index) => {\n        if (options.targets[index].format === 'time_series_records') {\n          result = result.concat(this.transformRecordsToTimeSeries(response, options.targets[index], options.range.to.valueOf()));\n        }\n      });\n\n      let tableResponses = _.filter(responses, (response, index) => {\n        return options.targets[index].format === 'records'\n          || options.targets[index].format === 'messages';\n      }).flatten();\n      if (tableResponses.length > 0) {\n        result.push(this.transformDataToTable(tableResponses));\n      }\n\n      return { data: result };\n    });\n  }\n\n  metricFindQuery(query) {\n    let range = this.timeSrv.timeRange();\n\n    let recordValuesQuery = query.match(/^record_values\\(([^,]+?),\\s?([^\\)]+?)\\)/);\n    if (recordValuesQuery) {\n      let recordKey = recordValuesQuery[1].toLowerCase();\n      let query = recordValuesQuery[2];\n      let params = {\n        query: this.templateSrv.replace(this.stripComment(query)),\n        from: String(this.convertTime(range.from, false)),\n        to: String(this.convertTime(range.to, true)),\n        timeZone: 'Etc/UTC'\n      };\n      return this.logQuery(params, 'records').then((result) => {\n        return result.records.map((r) => {\n          return {\n            text: r.map[recordKey],\n            value: r.map[recordKey]\n          };\n        })\n      });\n    }\n  }\n\n  annotationQuery(options) {\n    let annotation = options.annotation;\n    let query = annotation.query || '';\n    let tagKeys = annotation.tagKeys || '';\n    tagKeys = tagKeys.split(',');\n    let titleFormat = annotation.titleFormat || '';\n    let textFormat = annotation.textFormat || '';\n\n    if (!query) { return Promise.resolve([]); }\n\n    let params = {\n      query: this.templateSrv.replace(this.stripComment(query)),\n      from: String(this.convertTime(options.range.from, false)),\n      to: String(this.convertTime(options.range.to, true)),\n      timeZone: 'Etc/UTC'\n    };\n    return this.logQuery(params, 'messages').then((result) => {\n      let eventList = result.messages.map((message) => {\n        let tags = _.chain(message.map)\n          .filter((v, k) => {\n            return _.includes(tagKeys, k);\n          }).value();\n\n        return {\n          annotation: annotation,\n          time: parseInt(message.map['_messagetime'], 10),\n          title: this.renderTemplate(titleFormat, message.map),\n          tags: tags,\n          text: this.renderTemplate(textFormat, message.map)\n        };\n      });\n\n      return eventList;\n    });\n  }\n\n  testDatasource() {\n    let params = {\n      query: '| count _sourceCategory',\n      from: (new Date()).getTime() - 10 * 60 * 1000,\n      to: (new Date()).getTime(),\n      timeZone: 'Etc/UTC'\n    };\n    return this.logQuery(params, 'records').then((response) => {\n      return { status: 'success', message: 'Data source is working', title: 'Success' };\n    });\n  }\n\n  logQuery(params, format) {\n    let startTime = new Date();\n    return this.doRequest('POST', '/v1/search/jobs', params).then((job) => {\n      let loop = () => {\n        return this.doRequest('GET', '/v1/search/jobs/' + job.data.id).then((status) => {\n          let now = new Date();\n          if (now - startTime > (this.timeoutSec * 1000)) {\n            return this.doRequest('DELETE', '/v1/search/jobs/' + job.data.id).then((result) => {\n              return Promise.reject({ message: 'timeout' });\n            });\n          }\n\n          if (status.data.state !== 'DONE GATHERING RESULTS') {\n            return this.delay(loop, 1000);\n          }\n\n          if (status.data.pendingErrors.length !== 0 || status.data.pendingWarnings.length !== 0) {\n            return Promise.reject({ message: status.data.pendingErrors.concat(status.data.pendingWarnings).join('\\n') });\n          }\n\n          if (format === 'time_series_records' || format === 'records') {\n            if (status.data.recordCount === 0) {\n              return Promise.resolve([]);\n            }\n            let limit = Math.min(10000, status.data.recordCount);\n            return this.doRequest('GET', '/v1/search/jobs/' + job.data.id + '/records?offset=0&limit=' + limit).then((response) => {\n              return response.data;\n            });\n          } else if (format === 'messages') {\n            if (status.data.messageCount === 0) {\n              return Promise.resolve([]);\n            }\n            let limit = Math.min(10000, status.data.messageCount);\n            return this.doRequest('GET', '/v1/search/jobs/' + job.data.id + '/messages?offset=0&limit=' + limit).then((response) => {\n              return response.data;\n            });\n          } else {\n            return Promise.reject({ message: 'unsupported type' });\n          }\n        }).catch((err) => {\n          // need to wait until job is created and registered\n          if (err.data && err.data.code && err.data.code === 'searchjob.jobid.invalid') {\n            return this.delay(loop, 1000);\n          } else {\n            return Promise.reject(err);\n          }\n        });\n      };\n\n      return this.delay(() => {\n        return loop().then((result) => {\n          return result;\n        });\n      }, 0);\n    });\n  }\n\n  doRequest(method, path, params) {\n    let options = {\n      method: method,\n      url: this.url + path,\n      data: params,\n      headers: {},\n      inspect: { type: 'sumologic' }\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    options.headers['Content-Type'] = 'application/json';\n\n    return this.backendSrv.datasourceRequest(options).catch((err) => {\n      if (err.data && err.data.code && err.data.code === 'rate.limit.exceeded') {\n        return this.delay(() => {\n          return this.backendSrv.datasourceRequest(options);\n        }, 5000);\n      } else {\n        return Promise.reject(err);\n      }\n    });\n  }\n\n  delay(func, wait) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        func().then(resolve, reject);\n      }, wait);\n    });\n  }\n\n  transformDataToTable(data) {\n    let table = new TableModel();\n\n    if (data.length === 0) {\n      return table;\n    }\n\n    let type = data[0].records ? 'records' : 'messages';\n\n    let fields = _.chain(data)\n      .map((d) => {\n        return _.map(d.fields, 'name');\n      })\n      .flatten().uniq().value();\n\n    // columns\n    table.columns = fields.map((c) => {\n      return { text: c };\n    });\n\n    // rows\n    data.forEach((d) => {\n      for (let r of d[type]) {\n        let row = [];\n        for (let key of fields) {\n          row.push(r.map[key] || '');\n        }\n        table.rows.push(row);\n      }\n    });\n\n    return table;\n  }\n\n  transformRecordsToTimeSeries(response, target, defaultValue) {\n    let metricLabel = '';\n    let dps = [];\n    let fields = response.fields;\n    let records = response.records;\n\n    if (records.length === 0) {\n      return { target: metricLabel, datapoints: dps };\n    }\n\n    let keyField = fields.find((f) => {\n      return f.fieldType != 'string' && f.keyField;\n    });\n    keyField = keyField ? keyField.name : '';\n    let valueField = fields.find((f) => {\n      return f.fieldType != 'string' && !f.keyField;\n    });\n    if (!valueField) {\n      return { target: metricLabel, datapoints: dps };\n    }\n    valueField = valueField.name;\n\n    let result = {};\n    records.sort((a, b) => {\n      if (keyField === '') {\n        return 0;\n      }\n      if (a.map[keyField] < b.map[keyField]) {\n        return -1;\n      } else if (a.map[keyField] > b.map[keyField]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }).forEach((r) => {\n      metricLabel = this.createMetricLabel(r.map, target);\n      result[metricLabel] = result[metricLabel] || [];\n      result[metricLabel].push([parseFloat(r.map[valueField]), parseFloat(r.map[keyField] || defaultValue)]);\n    });\n\n    return _.map(result, (v, k) => {\n      return { target: k, datapoints: v };\n    });\n  }\n\n  createMetricLabel(record, target) {\n    if (_.isUndefined(target) || _.isEmpty(target.aliasFormat)) {\n      return '';\n    }\n\n    return this.renderTemplate(this.templateSrv.replace(target.aliasFormat), record) || '{}';\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, function (match, g1) {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n\n  stripComment(query) {\n    return query.split(\"\\n\").map(q => {\n      return q.replace(/(\\/\\*([\\s\\S]*?)\\*\\/)|(\\/\\/(.*)$)/gm, '');\n    }).filter(q => {\n      return q !== \"\";\n    }).join(\"\\n\");\n  }\n\n  convertTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return date.valueOf();\n  }\n}\n"]}
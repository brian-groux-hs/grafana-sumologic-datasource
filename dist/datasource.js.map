{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","angular","dateMath","TableModel","SumologicDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","url","basicAuth","withCredentials","options","timeoutSec","queries","map","targets","target","params","query","replace","scopedVars","from","String","convertTime","range","to","timeZone","startTime","Date","doRequest","then","job","status","reject","message","loop","data","id","now","result","state","Promise","resolve","setTimeout","format","records","messages","all","each","responses","response","index","push","transformRecordsToTimeSeries","tableResponses","filter","flatten","length","transformDataToTable","when","title","method","path","headers","inspect","Authorization","datasourceRequest","table","fields","chain","d","uniq","value","columns","c","text","r","row","key","rows","metricLabel","dps","datapoints","createMetricLabel","parseFloat","parseInt","sort","a","b","record","isUndefined","isEmpty","aliasFormat","renderTemplate","aliasPattern","aliasData","aliasRegex","match","g1","date","roundUp","isString","parse","valueOf"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport angular from 'angular';\nimport dateMath from 'app/core/utils/datemath';\nimport TableModel from 'app/core/table_model';\n\nexport class SumologicDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.url = instanceSettings.url;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    let timeoutSec = 30;\n\n    let queries = _.map(options.targets, (target) => {\n      let params = {\n        query: this.templateSrv.replace(target.query, options.scopedVars),\n        from: String(this.convertTime(options.range.from, false)),\n        to: String(this.convertTime(options.range.to, true)),\n        timeZone: 'Etc/UTC'\n      };\n      let startTime = new Date();\n      return this.doRequest('POST', '/search/jobs', params).then((job) => {\n        if (job.status !== 202) {\n          return this.$q.reject({ message: 'error' });\n        }\n\n        let loop = () => {\n          return this.doRequest('GET', '/search/jobs/' + job.data.id).then((status) => {\n            let now = new Date();\n            if (now - startTime > (timeoutSec * 1000)) {\n              return this.doRequest('DELETE', '/search/jobs/' + job.data.id).then((result) => {\n                return this.$q.reject({ message: 'timeout' });\n              });\n            }\n\n            if (status.data.state !== 'DONE GATHERING RESULTS') {\n              return new Promise((resolve) => {\n                setTimeout(() => {\n                  loop().then(resolve);\n                }, 1000);\n              });\n            }\n\n            if (target.format === 'time_series' || target.format === 'records') {\n              return this.doRequest('GET', '/search/jobs/' + job.data.id + '/records?offset=0&limit=10000').then((records) => {\n                return records;\n              });\n            } else if (target.format === 'messages') {\n              return this.doRequest('GET', '/search/jobs/' + job.data.id + '/messages?offset=0&limit=10000').then((messages) => {\n                return messages;\n              });\n            } else {\n                return this.$q.reject({ message: 'unsupported type' });\n            }\n          });\n        };\n\n        return loop().then((result) => {\n          return result;\n        });\n      });\n    })\n\n    return this.$q.all(queries).then(responses => {\n      let result = [];\n\n      _.each(responses, (response, index) => {\n        if (options.targets[index].format === 'time_series') {\n          result.push(this.transformRecordsToTimeSeries(response.data.records, options.targets[index]));\n        }\n      });\n\n      let tableResponses = _.filter(responses, (response, index) => {\n        return options.targets[index].format === 'records'\n          || options.targets[index].format === 'messages';\n      })\n      .map((response) => {\n        return response.data;\n      })\n      .flatten();\n      if (tableResponses.length > 0) {\n        result.push(this.transformDataToTable(tableResponses));\n      }\n\n      return { data: result };\n    });\n  }\n\n  testDatasource() {\n    return this.$q.when({ status: 'success', message: 'Data source is working', title: 'Success' });\n  }\n\n  doRequest(method, path, params) {\n    let options = {\n      method: method,\n      url: this.url + path,\n      data: params,\n      headers: {},\n      inspect: { type: 'sumologic' }\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    options.headers['Content-Type'] = 'application/json';\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  transformDataToTable(data) {\n    let table = new TableModel();\n\n    if (data.length === 0) {\n      return table;\n    }\n\n    let type = data[0].records ? 'records' : 'messages';\n\n    let fields = _.chain(data)\n      .map((d) => {\n        return _.map(d.fields, 'name');\n      })\n      .flatten().uniq().value();\n\n    // columns\n    table.columns = fields.map((c) => {\n      return { text: c };\n    });\n\n    // rows\n    _.each(data, (d) => {\n      for (let r of d[type]) {\n        let row = [];\n        for (let key of fields) {\n          row.push(r.map[key] || '');\n        }\n        table.rows.push(row);\n      }\n    });\n\n    return table;\n  }\n\n  transformRecordsToTimeSeries(records, target) {\n    let metricLabel = '';\n    let dps = [];\n\n    if (records.length === 0) {\n      return { target: metricLabel, datapoints: dps };\n    }\n\n    metricLabel = this.createMetricLabel(records[0].map, target);\n    _.each(records, (r) => {\n      dps.push([parseFloat(r.map['_count']), parseInt(r.map['_timeslice'], 10)]);\n    });\n    dps = dps.sort((a, b) => {\n      if (a[1] < b[1]) {\n        return -1;\n      } else if (a[1] > b[1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    })\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(record, target) {\n    if (_.isUndefined(target) || _.isEmpty(target.aliasFormat)) {\n      return '';\n    }\n\n    return this.renderTemplate(this.templateSrv.replace(target.aliasFormat), record) || '{}';\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, function (match, g1) {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n\n  convertTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return date.valueOf();\n  }\n}\n"]}
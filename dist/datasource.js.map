{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","angular","dateMath","TableModel","SumologicQuerier","Observable","SumologicDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","name","url","basicAuth","withCredentials","timeoutSec","jsonData","timeout","fieldIndex","tagKeys","Set","tagValues","MAX_AVAILABLE_TOKEN","token","tokenTimer","excludeFieldList","clearInterval","options","self","queries","chain","targets","filter","target","hide","query","map","params","replace","stripComment","scopedVars","from","convertTime","range","to","timeZone","adhocFilters","getAdhocFilters","length","filterQuery","f","operator","key","value","join","indexOf","logQuery","format","mergeMap","scan","acc","one","fields","records","concat","messages","combineLatest","responses","r","isEmpty","hasAdhocFilter","forEach","includes","add","Object","keys","d","tagKey","tableResponses","response","index","flatten","data","transformDataToTable","transformRecordsToTimeSeries","valueOf","timeRange","recordValuesQuery","match","recordKey","toLowerCase","String","then","result","text","annotation","split","titleFormat","textFormat","Promise","resolve","eventList","message","tags","v","k","time","parseInt","title","renderTemplate","Date","getTime","status","useObservable","querier","getResult","table","uniq","columns","c","filterable","row","push","rows","defaultValue","metricLabel","dps","datapoints","keyField","find","fieldType","valueField","sort","a","b","createMetricLabel","parseFloat","record","isUndefined","aliasFormat","aliasPattern","aliasData","aliasRegex","g1","q","date","roundUp","isString","parse","some","variables","variable","Array"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport angular from 'angular';\nimport dateMath from 'app/core/utils/datemath';\nimport TableModel from 'app/core/table_model';\nimport { SumologicQuerier } from './querier';\nimport Observable from 'rxjs/Observable';\n\n\nexport class SumologicDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.url = instanceSettings.url;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.timeoutSec = instanceSettings.jsonData.timeout || 30;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n    this.fieldIndex = {\n      tagKeys: new Set(),\n      tagValues: {}\n    };\n    // Rate limiting, https://help.sumologic.com/APIs/Search-Job-API/About-the-Search-Job-API\n    this.MAX_AVAILABLE_TOKEN = 4; // 4 api calls per second\n    this.token = this.MAX_AVAILABLE_TOKEN;\n    this.tokenTimer = null;\n    this.excludeFieldList = [\n      '_raw', '_collectorid', '_sourceid', '_messageid', '_messagecount', '_messagetime', '_receipttime',\n      '_size', '_timeslice', 'processing_time_ms'\n    ];\n  }\n\n  provideToken() {\n    if (this.token < this.MAX_AVAILABLE_TOKEN) {\n      this.token += 1;\n      if (this.token === this.MAX_AVAILABLE_TOKEN) {\n        clearInterval(this.tokenTimer);\n        this.tokenTimer = null;\n      }\n    }\n  }\n\n  query(options) {\n    let self = this;\n    let queries = _.chain(options.targets)\n      .filter((target) => {\n        return !target.hide && target.query;\n      })\n      .map((target) => {\n        let params = {\n          query: this.templateSrv.replace(this.stripComment(target.query), options.scopedVars),\n          from: this.convertTime(options.range.from, false),\n          to: this.convertTime(options.range.to, true),\n          timeZone: 'Etc/UTC'\n        };\n        let adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n        if (adhocFilters.length > 0) {\n          let filterQuery = ' | where ' + adhocFilters.map(f => {\n            switch (f.operator) {\n              case '=~':\n                return f.key + ' ' + 'matches' + ' \"' + f.value + '\"';\n              case '!~':\n                return '!(' + f.key + ' ' + 'matches' + ' \"' + f.value + '\"' + ')';\n              default:\n                return f.key + ' ' + f.operator + ' \"' + f.value + '\"';\n            }\n          }).join(' and ');\n          if (params.query.indexOf('|') === -1) {\n            params.query += filterQuery;\n          } else {\n            params.query = params.query.replace(/\\|/, filterQuery + ' |');\n          }\n        }\n        return this.logQuery(params, target.format, true)\n          .mergeMap(value => value)\n          .scan((acc, one) => {\n            acc.fields = one.fields;\n            if (one.records) {\n              acc.records = (acc.records || []).concat(one.records);\n            } else if (one.messages) {\n              acc.messages = (acc.messages || []).concat(one.messages);\n            }\n            return acc;\n          }, {});\n      }).value();\n    return Observable\n      .combineLatest(queries)\n      .map((responses) => {\n        responses = responses.filter((r) => { return !_.isEmpty(r); });\n\n        if (this.hasAdhocFilter()) {\n          this.fieldIndex = {\n            tagKeys: new Set(),\n            tagValues: {}\n          };\n\n          // build fieldIndex\n          responses.forEach(r => {\n            r.fields.map(f => {\n              return f.name;\n            }).filter(name => {\n              return !this.excludeFieldList.includes(name);\n            }).forEach(name => {\n              this.fieldIndex.tagKeys.add(name);\n            });\n          });\n\n          responses.forEach(r => {\n            (r.records || r.messages).forEach(d => {\n              Object.keys(d.map).filter(tagKey => {\n                return !this.excludeFieldList.includes(tagKey);\n              }).forEach(tagKey => {\n                if (!this.fieldIndex.tagValues[tagKey]) {\n                  this.fieldIndex.tagValues[tagKey] = new Set();\n                }\n                this.fieldIndex.tagValues[tagKey].add(d.map[tagKey]);\n              });\n            });\n          });\n        }\n\n        let tableResponses = _.chain(responses)\n          .filter((response, index) => {\n            return options.targets[index].format === 'records' || options.targets[index].format === 'messages';\n          })\n          .flatten()\n          .value();\n\n        if (tableResponses.length > 0) {\n          return { data: [self.transformDataToTable(tableResponses)] };\n        } else {\n          return {\n            data: responses.map((response, index) => {\n              if (options.targets[index].format === 'time_series_records') {\n                return self.transformRecordsToTimeSeries(response, options.targets[index].format, options.range.to.valueOf());\n              }\n              return data;\n            }).flatten()\n          };\n        }\n      });\n  }\n\n  metricFindQuery(query) {\n    let range = this.timeSrv.timeRange();\n\n    let recordValuesQuery = query.match(/^record_values\\(([^,]+?),\\s?([^\\)]+?)\\)/);\n    if (recordValuesQuery) {\n      let recordKey = recordValuesQuery[1].toLowerCase();\n      let query = recordValuesQuery[2];\n      let params = {\n        query: this.templateSrv.replace(this.stripComment(query)),\n        from: String(this.convertTime(range.from, false)),\n        to: String(this.convertTime(range.to, true)),\n        timeZone: 'Etc/UTC'\n      };\n      return this.logQuery(params, 'records', false).then((result) => {\n        if (_.isEmpty(result)) {\n          return [];\n        }\n        return result.records.map((r) => {\n          return {\n            text: r.map[recordKey],\n            value: r.map[recordKey]\n          };\n        })\n      });\n    }\n  }\n\n  annotationQuery(options) {\n    let annotation = options.annotation;\n    let query = annotation.query || '';\n    let tagKeys = annotation.tagKeys || '';\n    tagKeys = tagKeys.split(',');\n    let titleFormat = annotation.titleFormat || '';\n    let textFormat = annotation.textFormat || '';\n\n    if (!query) { return Promise.resolve([]); }\n\n    let params = {\n      query: this.templateSrv.replace(this.stripComment(query)),\n      from: String(this.convertTime(options.range.from, false)),\n      to: String(this.convertTime(options.range.to, true)),\n      timeZone: 'Etc/UTC'\n    };\n    return this.logQuery(params, 'messages', false).then((result) => {\n      if (_.isEmpty(result)) {\n        return [];\n      }\n\n      let eventList = result.messages.map((message) => {\n        let tags = _.chain(message.map)\n          .filter((v, k) => {\n            return _.includes(tagKeys, k);\n          }).value();\n\n        return {\n          annotation: annotation,\n          time: parseInt(message.map['_messagetime'], 10),\n          title: this.renderTemplate(titleFormat, message.map),\n          tags: tags,\n          text: this.renderTemplate(textFormat, message.map)\n        };\n      });\n\n      return eventList;\n    });\n  }\n\n  testDatasource() {\n    let params = {\n      query: '| count _sourceCategory',\n      from: (new Date()).getTime() - 10 * 60 * 1000,\n      to: (new Date()).getTime(),\n      timeZone: 'Etc/UTC'\n    };\n    return this.logQuery(params, 'records', false).then((response) => {\n      return { status: 'success', message: 'Data source is working', title: 'Success' };\n    });\n  }\n\n  logQuery(params, format, useObservable) {\n    let querier = new SumologicQuerier(params, format, this.timeoutSec, useObservable, this, this.backendSrv);\n    return querier.getResult();\n  }\n\n  transformDataToTable(data) {\n    let table = new TableModel();\n\n    if (data.length === 0) {\n      return table;\n    }\n\n    let type = data[0].records ? 'records' : 'messages';\n\n    let fields = _.chain(data)\n      .map((d) => {\n        return _.map(d.fields, 'name');\n      })\n      .flatten().uniq().value();\n\n    // columns\n    table.columns = fields.map((c) => {\n      return { text: c, filterable: true };\n    });\n\n    // rows\n    data.forEach((d) => {\n      for (let r of d[type]) {\n        let row = [];\n        for (let key of fields) {\n          row.push(r.map[key] || '');\n        }\n        table.rows.push(row);\n      }\n    });\n\n    return table;\n  }\n\n  transformRecordsToTimeSeries(response, target, defaultValue) {\n    let metricLabel = '';\n    let dps = [];\n    let fields = response.fields;\n    let records = response.records;\n\n    if (records.length === 0) {\n      return { target: metricLabel, datapoints: dps };\n    }\n\n    let keyField = fields.find((f) => {\n      return f.fieldType != 'string' && f.keyField;\n    });\n    keyField = keyField ? keyField.name : '';\n    let valueField = fields.find((f) => {\n      return f.fieldType != 'string' && !f.keyField;\n    });\n    if (!valueField) {\n      return { target: metricLabel, datapoints: dps };\n    }\n    valueField = valueField.name;\n\n    let result = {};\n    records.sort((a, b) => {\n      if (keyField === '') {\n        return 0;\n      }\n      if (a.map[keyField] < b.map[keyField]) {\n        return -1;\n      } else if (a.map[keyField] > b.map[keyField]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }).forEach((r) => {\n      metricLabel = this.createMetricLabel(r.map, target);\n      result[metricLabel] = result[metricLabel] || [];\n      result[metricLabel].push([parseFloat(r.map[valueField]), parseFloat(r.map[keyField] || defaultValue)]);\n    });\n\n    return _.map(result, (v, k) => {\n      return { target: k, datapoints: v };\n    });\n  }\n\n  createMetricLabel(record, target) {\n    if (_.isUndefined(target) || _.isEmpty(target.aliasFormat)) {\n      return '';\n    }\n\n    return this.renderTemplate(this.templateSrv.replace(target.aliasFormat), record) || '{}';\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, function (match, g1) {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n\n  stripComment(query) {\n    return query.split(\"\\n\").map(q => {\n      return q.replace(/(\\/\\*([\\s\\S]*?)\\*\\/)|(\\/\\/(.*)$)/gm, '');\n    }).filter(q => {\n      return q !== \"\";\n    }).join(\"\\n\");\n  }\n\n  convertTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return date.valueOf();\n  }\n\n  hasAdhocFilter() {\n    return _.some(this.templateSrv.variables, variable => {\n      return variable.type === 'adhoc';\n    });\n  }\n\n  getTagKeys(options) {\n    return Promise.resolve(Array.from(this.fieldIndex.tagKeys).map(k => {\n      return {\n        type: 'key',\n        text: k\n      };\n    }));\n  }\n\n  getTagValues(options) {\n    return Promise.resolve(Array.from(this.fieldIndex.tagValues[options.key]).map(v => {\n      return {\n        type: 'value',\n        text: v\n      };\n    }));\n  }\n}\n"]}